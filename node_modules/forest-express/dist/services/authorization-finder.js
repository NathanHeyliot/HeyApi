'use strict';

var P = require('bluebird');
var request = require('superagent');
var logger = require('./logger');
var ServiceUrlGetter = require('./service-url-getter');
var errorMessages = require('../utils/error-messages');

function GoogleAuthorizationFinder(renderingId, email, password, envSecret) {
  this.perform = function () {
    return new P(function (resolve, reject) {
      var forestUrl = new ServiceUrlGetter().perform();

      request.post(forestUrl + '/liana/v1/renderings/' + renderingId + '/authorization').set('forest-secret-key', envSecret).send({ email: email, password: password }).end(function (error, result) {
        console.log('result.status: ', result.status);
        console.log('result.body: ');
        console.log(JSON.stringify(result.body, null, 2));
        if (result.status === 200 && result.body && result.body.data && result.body.data.attributes) {
          var user = result.body.data.attributes;

          user.id = result.body.data.id;
          resolve(user);
        } else {
          if (result.status === 0) {
            logger.error(errorMessages.SESSION.SERVER_DOWN);
          } else if (result.status === 404) {
            logger.error(errorMessages.SESSION.SECRET_NOT_FOUND);
          } else if (result.status === 422) {
            logger.error(errorMessages.SESSION.SECRET_AND_RENDERINGID_INCONSISTENT);
          } else {
            logger.error(errorMessages.SESSION.UNEXPECTED, error);
          }
          reject(new Error());
        }
      });
    });
  };
}

module.exports = GoogleAuthorizationFinder;